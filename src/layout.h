// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":29359,"type":"Led","state":{"id":"Led_Y","x":11,"y":0,"w":1,"h":1,"css":{},"color":"#ffff80","on":true}},{"uuid":57101,"type":"Button","state":{"id":"Start","x":2,"y":0,"w":3,"h":1,"css":{"":""},"text":"Start"}},{"uuid":48092,"type":"Led","state":{"id":"Led_R","x":5.5,"y":0,"w":1,"h":1,"css":{},"color":"#FF0000","on":false}},{"uuid":55435,"type":"Slider","state":{"id":"speed","x":0.5,"y":3.5,"w":10,"h":2,"css":{},"color":"#008000","fontSize":16,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":26476,"type":"Led","state":{"id":"Led_G","x":0.5,"y":0,"w":1,"h":1,"css":{},"color":"#80ff80","on":false}},{"uuid":54783,"type":"Text","state":{"id":"Text1","x":11,"y":4,"w":1,"h":1,"css":{},"text":"R","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":50890,"type":"Slider","state":{"id":"G","x":0.5,"y":6,"w":10,"h":2,"css":{},"color":"#008000","fontSize":16,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":43328,"type":"Slider","state":{"id":"B","x":0.5,"y":8.5,"w":10,"h":2,"css":{},"color":"#008000","fontSize":16,"min":-100,"max":100,"value":0,"precision":1,"showValue":true}},{"uuid":34173,"type":"Text","state":{"id":"Text2","x":11,"y":6.5,"w":1,"h":1,"css":{},"text":"G","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":26367,"type":"Text","state":{"id":"Text3","x":11,"y":9,"w":1,"h":1,"css":{},"text":"B","fontSize":12,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":16192,"type":"Button","state":{"id":"Stop","x":7,"y":0,"w":3,"h":1,"css":{},"text":"Stop"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Led_Y(
            UI.led(11, 0, 1, 1, 29359)
                .color("#ffff80")
                .on(true)
        ),
        Start(
            UI.button(2, 0, 3, 1, 57101)
                .css("", "")
                .text("Start")
        ),
        Led_R(
            UI.led(5.5, 0, 1, 1, 48092)
        ),
        speed(
            UI.slider(0.5, 3.5, 10, 2, 55435)
                .min(-100)
        ),
        Led_G(
            UI.led(0.5, 0, 1, 1, 26476)
                .color("#80ff80")
        ),
        Text1(
            UI.text(11, 4, 1, 1, 54783)
                .text("R")
        ),
        G(
            UI.slider(0.5, 6, 10, 2, 50890)
                .min(-100)
        ),
        B(
            UI.slider(0.5, 8.5, 10, 2, 43328)
                .min(-100)
        ),
        Text2(
            UI.text(11, 6.5, 1, 1, 34173)
                .text("G")
        ),
        Text3(
            UI.text(11, 9, 1, 1, 26367)
                .text("B")
        ),
        Stop(
            UI.button(7, 0, 3, 1, 16192)
                .text("Stop")
        )
    {
    }

public:
    void commit();

    Led& Led_Y;
    Button& Start;
    Led& Led_R;
    Slider& speed;
    Led& Led_G;
    Text& Text1;
    Slider& G;
    Slider& B;
    Text& Text2;
    Text& Text3;
    Button& Stop;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Led Led_Y;
    Button Start;
    Led Led_R;
    Slider speed;
    Led Led_G;
    Text Text1;
    Slider G;
    Slider B;
    Text Text2;
    Text Text3;
    Button Stop;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Led_Y = Led_Y.finish();
    Layout.Start = Start.finish();
    Layout.Led_R = Led_R.finish();
    Layout.speed = speed.finish();
    Layout.Led_G = Led_G.finish();
    Layout.Text1 = Text1.finish();
    Layout.G = G.finish();
    Layout.B = B.finish();
    Layout.Text2 = Text2.finish();
    Layout.Text3 = Text3.finish();
    Layout.Stop = Stop.finish();
    UI.commit();
}

};

};